# .github/workflows/ci.yml
name: Python Code Quality Pipeline

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Or your default branch
  pull_request:
    branches: [ main ] # Or your default branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"] # Test on multiple Python versions

    steps:
      #----------------------------------------------
      #       Set up the environment
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4 # Checks-out your repository under $GITHUB_WORKSPACE

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Install project dependencies first
          # Install tools needed for linting, security, testing
          pip install flake8 pylint black bandit pip-audit pytest
        # Optional: Add caching for dependencies
        # uses: actions/cache@v3
        # with:
        #   path: ~/.cache/pip
        #   key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements-dev.txt') }} # Adjust key as needed
        #   restore-keys: |
        #     ${{ runner.os }}-pip-

      #----------------------------------------------
      #              Run Linting
      #----------------------------------------------
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Lint with pylint
        run: |
          pylint my_module/ tests/ || true # Run pylint on specific folders, allow failure for now or set threshold later

      - name: Scan for security issues with bandit
        run: |
          bandit -r . -ll # -ll shows medium+ severity issues

      - name: Check for insecure dependencies with pip-audit
        run: |
          # Create a temporary requirements file with *all* installed packages
          pip freeze > temp_requirements.txt
          pip-audit -r temp_requirements.txt
          rm temp_requirements.txt

      #----------------------------------------------
      #                Run Tests
      #----------------------------------------------
      - name: Run tests with pytest
        run: |
          pytest tests/ --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml # Generate JUnit XML report

      #----------------------------------------------
      #     Upload Test Results (Optional)
      #----------------------------------------------
      # This step uploads the JUnit XML files generated by pytest.
      # These can be viewed in the Actions summary or used by other tools/reporting.
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results even if tests failed
        if: always()

  #----------------------------------------------
  #     Add SonarCloud Scan Job (See Step 4)
  #----------------------------------------------
  # sonarcloud:
  #   name: SonarCloud Scan
  #   runs-on: ubuntu-latest
  #   needs: build # Ensure this job runs after the build job finishes
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for better analysis
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master # Or pin to a specific version
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Secret token should be configured in Repo Settings -> Secrets